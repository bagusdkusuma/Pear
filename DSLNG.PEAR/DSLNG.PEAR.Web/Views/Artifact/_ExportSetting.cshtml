@using DSLNG.PEAR.Data.Enums
@model DSLNG.PEAR.Web.ViewModels.Artifact.ExportSettingViewModel
<style>
    label {
        width: 120px;
    }
</style>
<div class="form-inline whitebox">
    @Html.HiddenFor(model => model.PeriodeType, new { @class = "form-control" })
    @Html.HiddenFor(model => model.RangeFilter)
    @Html.HiddenFor(model => model.GraphicType)
    @Html.HiddenFor(model => model.AsNetBackChart)
    @Html.HiddenFor(model => model.Name)
    @Html.HiddenFor(model => model.ArtifactId)
    <div class="form-inline whitebox">
        <div id="general-export-settings">
            <div class="form-group form-list">
                <hr />
            </div>

            <div>
                <div class="form-group form-list">
                    @Html.LabelFor(model => model.KpiId)
                    @Html.DropDownList("KpiIds", Model.Kpis, new { @class = "select2-multiple2", @style = "width: 200px" })
                    @Html.ValidationMessageFor(model => model.KpiId)
                </div>
                <div class="form-group form-list">
                    @Html.LabelFor(model => model.StartInDisplay)
                    @Html.TextBoxFor(model => model.StartInDisplay, new { data_provide = "datepicker", @class = "datepicker form-control", autocomplete = "off" })
                    @Html.ValidationMessageFor(model => model.StartInDisplay)
                </div>

                <div class="form-group form-list">
                    @Html.LabelFor(model => model.EndInDisplay)
                    @Html.TextBoxFor(model => model.EndInDisplay, new { data_provide = "datepicker", @class = "datepicker form-control", autocomplete = "off" })
                    @Html.ValidationMessageFor(model => model.EndInDisplay)
                </div>
                <div class="form-group form-list">
                    @Html.LabelFor(model => model.FileName)
                    @Html.TextBoxFor(model => model.FileName, new { @class = "filename" })
                    @Html.ValidationMessageFor(model => model.FileName)
                </div>
            </div>
        </div>

        @{
            if (Model.PeriodeType == PeriodeType.Yearly.ToString())
            {
                <span id="datetime-attr" data-datepickerformat="YYYY"></span>
            }
            else if (Model.PeriodeType == PeriodeType.Monthly.ToString())
            {
                <span id="datetime-attr" data-datepickerformat="MM/YYYY"></span>
            }
            else if (Model.PeriodeType == PeriodeType.Weekly.ToString())
            {
                <span id="datetime-attr" data-datepickerformat="MM/DD/YYYY"></span>
            }
            else if (Model.PeriodeType == PeriodeType.Daily.ToString())
            {
                <span id="datetime-attr" data-datepickerformat="MM/DD/YYYY"></span>
            }
            else if (Model.PeriodeType == PeriodeType.Hourly.ToString())
            {
                <span id="datetime-attr" data-datepickerformat="MM/DD/YYYY hh:00 A"></span>
            }
        }
    </div>

</div>

<script type="text/javascript">
    $(document).ready(function () {
        @*var headerTitle = @Html.Raw(Json.Encode(title));
        var mt = $('.modal-title')
        mt.text(headerTitle);*@

       
        $('.select2-multiple2').select2MultiCheckboxes({
            templateSelection: function (selected, total) {
                return "Selected " + selected.length + " of " + total;
            }
        })
        $('.select2-multiple2 > option').prop('selected', true);
        $('.select2-multiple2').select2MultiCheckboxes('refresh');

        if ($('.filename').val().length < 7) {
            $('.export').prop('disabled', true);
        }

        $('.filename').change(function () {
            if ($(this).val().length >= 7) {
                $('.export').prop('disabled', false);
            } else {
                $('.export').prop('disabled', true);
            }
        });

        $('.modal-title-export').html('@Model.Name');
    });
</script>